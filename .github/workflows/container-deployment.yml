name: .NET Container Deployment

on:
  workflow_call:
    inputs:
      ecr_repository_name:
        type: string
        required: true
      image_name:
        type: string
        required: true
      dockerfile:
        type: string
        required: true
      project_directory:
        type: string
        required: true
      terraform_directory:
        type: string
        required: true
      global_json_file:
        type: string
        required: true

jobs:
  dotnet_build:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.push_image.outputs.image_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: ${{ inputs.global_json_file }}

      - name: Build and Test
        run: |
          cd ${{ inputs.project_directory }}
          dotnet restore
          dotnet build
          dotnet test

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          path: |
            ./TestResults/*

  image_build:
    runs-on: ubuntu-latest
    needs:
      - dotnet_build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Build Image
        run: |
          docker build -t ${{ inputs.image_name }} ${{ inputs.dockerfile }}

      - id: push_image
        name: Push Image to ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ inputs.ecr_repository_name }}
          echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_OUTPUT
          docker tag ${{ inputs.image_name }} ${{ inputs.ecr_repository_name }}/${{ inputs.image_name }}:${{ github.sha }}
          # docker push ${{ inputs.ecr_repository_name }}/${{ inputs.image_name }}:${{ github.sha }}

  terraform_validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Validate
        run: |
          cd ${{ inputs.terraform_directory }}
          terraform init -upgrade
          terraform validate

  terraform_plan:
    runs-on: ubuntu-latest
    needs: 
      - image_build
      - terraform_validate
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Plan
        run: |
          cd ${{ inputs.terraform_directory }}
          terraform init -upgrade
          terraform validate
          echo "image_tag = \"${{ needs.build.outputs.image_tag }}\"" >> dev.tfvars
          terraform plan -var-file="dev.tfvars" -out ../tfplan
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: terraform_plan
          path: tfplan
        
  deploy:
    runs-on: ubuntu-latest
    needs: 
      - terraform_plan
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v3

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: terraform_plan

      - name: Terraform Apply
        run: |
          cd ${{ inputs.terraform_directory }}
          terraform init -upgrade
          terraform apply ../tfplan
