name: .NET Container Deployment

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
        default: dev
      ecr_registry:
        type: string
        required: true
      ecr_repo:
        type: string
        required: true
      dockerfile:
        type: string
        required: true
      context:
        type: string
        required: true
      project_directory:
        type: string
        required: true
      terraform_directory:
        type: string
        required: true
      global_json_file:
        type: string
        required: true
      private_nuget_registry:
        type: string
        default: ''

jobs:
  dotnet_build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: ${{ inputs.global_json_file }}

      - name: Add Private NuGet Registry
        if: ${{ inputs.private_nuget_registry != '' }}
        run: |
          dotnet nuget add source ${{ inputs.private_nuget_registry }} \
            --username ${{ secrets.PRIVATE_NUGET_REGISTRY_USER }} --password ${{ secrets.PRIVATE_NUGET_REGISTRY_PASS }} --store-password-in-clear-text

      - name: Build and Test
        run: |
          cd ${{ inputs.project_directory }}
          dotnet restore
          dotnet build
          dotnet test

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          path: |
            ./TestResults/*

  image_build:
    runs-on: ubuntu-latest
    needs:
      - dotnet_build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Add Private NuGet Registry
        if: ${{ inputs.private_nuget_registry }} == ''
        run: |
          echo "PRIVATE_NUGET_REGISTRY=${{ inputs.private_nuget_registry }}" >> arguments.txt
          echo "PRIVATE_NUGET_REGISTRY_USER=${{ secrets.PRIVATE_NUGET_REGISTRY_USER }}" >> arguments.txt
          echo "PRIVATE_NUGET_REGISTRY_PASS=${{ secrets.PRIVATE_NUGET_REGISTRY_PASS }}" >> arguments.txt
          echo "BUILD_ARGS=$(for arg in $(cat arguments.txt); do echo "--build-arg $arg "; done | tr -d '\n')" >> $GITHUB_ENV

      - name: Build Image
        run: |
          docker build -t ${{ inputs.ecr_registry }} $BUILD_ARGS -f ${{ inputs.dockerfile }} ${{ inputs.context }}

      - id: push_image
        name: Push Image to ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ inputs.ecr_registry }}
          docker tag ${{ github.ref_name }} ${{ inputs.ecr_registry }}/${{ inputs.ecr_repo }}:${{ github.sha }}
          docker push ${{ inputs.ecr_registry }}/${{ inputs.ecr_repo }}:${{ github.sha }}

  terraform_validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Validate
        working-directory: ${{ inputs.terraform_directory }}
        run: |
          terraform init -upgrade
          terraform validate

  terraform_plan:
    runs-on: ubuntu-latest
    needs: 
      - image_build
      - terraform_validate
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v3

      - name: Setup Terraform Variables
        run: |
          echo "image_tag = \"${{ github.ref_name }}\"" >> ${{ inputs.environment }}.tfvars

      - name: Terraform Plan
        working-directory: ${{ inputs.terraform_directory }}
        run: |
          terraform init
          terraform validate
          terraform plan -input=false -var-file="../${{ inputs.environment }}.tfvars" -out ../final.tfplan

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: terraform_plan
          path: final.tfplan
        
  terraform_apply:
    if: github.event_name == 'workflow_dispatch'
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    needs: 
      - terraform_plan
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v3

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: terraform_plan

      - name: Terraform Apply
        working-directory: ${{ inputs.terraform_directory }}
        run: |
          terraform init
          terraform apply -auto-approve ../final.tfplan
